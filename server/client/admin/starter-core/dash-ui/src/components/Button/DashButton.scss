@import 'bootstrap/scss/variables';

//
// Base styles
//

.btn {
  // scss-docs-start btn-css-vars
  --#{$prefix}border-radius: #{$border-radius};
  --#{$prefix}btn-padding-x: #{$btn-padding-x};
  --#{$prefix}btn-padding-y: #{$btn-padding-y};
  --#{$prefix}btn-font-family: #{$btn-font-family};
  @include rfs($btn-font-size, --#{$prefix}btn-font-size);
  --#{$prefix}btn-font-weight: #{$btn-font-weight};
  --#{$prefix}btn-line-height: #{$btn-line-height};
  --#{$prefix}btn-color: #{$btn-color};
  --#{$prefix}btn-bg: transparent;
  --#{$prefix}btn-border-color: transparent;
  --#{$prefix}btn-border-radius: #{$btn-border-radius};
  --#{$prefix}btn-hover-border-color: transparent;
  --#{$prefix}btn-box-shadow: #{$btn-box-shadow};
  --#{$prefix}btn-disabled-opacity: #{$btn-disabled-opacity};
  --#{$prefix}btn-focus-box-shadow: 0 0 0 #{$btn-focus-width} rgba(var(--#{$prefix}btn-focus-shadow-rgb), .5);
  // scss-docs-end btn-css-vars

  display: inline-block;
  padding: var(--#{$prefix}btn-padding-y) var(--#{$prefix}btn-padding-x);
  font-family: var(--#{$prefix}btn-font-family);
  @include font-size(var(--#{$prefix}btn-font-size));
  font-weight: var(--#{$prefix}btn-font-weight);
  line-height: var(--#{$prefix}btn-line-height);
  color: var(--#{$prefix}btn-color);
  text-align: center;
  text-decoration: if($link-decoration == none, null, none);
  white-space: $btn-white-space;
  vertical-align: middle;
  cursor: if($enable-button-pointers, pointer, null);
  user-select: none;
  border: 1px solid var(--#{$prefix}btn-border-color);
  border-radius: $btn-border-radius;
  @include gradient-bg(var(--#{$prefix}btn-bg));
  @include box-shadow(var(--#{$prefix}btn-box-shadow));
  @include transition($btn-transition);

  &:hover {
    color: var(--#{$prefix}btn-hover-color);
    text-decoration: if($link-hover-decoration == underline, none, null);
    background-color: var(--#{$prefix}btn-hover-bg);
    border-color: var(--#{$prefix}btn-hover-border-color);
  }

  .btn-check + &:hover {
    // override for the checkbox/radio buttons
    color: var(--#{$prefix}btn-color);
    background-color: var(--#{$prefix}btn-bg);
    border-color: var(--#{$prefix}btn-border-color);
  }

  &:focus-visible {
    color: var(--#{$prefix}btn-hover-color);
    @include gradient-bg(var(--#{$prefix}btn-hover-bg));
    border-color: var(--#{$prefix}btn-hover-border-color);
    outline: 0;
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: var(--#{$prefix}btn-box-shadow), var(--#{$prefix}btn-focus-box-shadow);
    } @else {
      box-shadow: var(--#{$prefix}btn-focus-box-shadow);
    }
  }

  .btn-check:focus-visible + & {
    border-color: var(--#{$prefix}btn-hover-border-color);
    outline: 0;
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: var(--#{$prefix}btn-box-shadow), var(--#{$prefix}btn-focus-box-shadow);
    } @else {
      box-shadow: var(--#{$prefix}btn-focus-box-shadow);
    }
  }

  .btn-check:checked + &,
  :not(.btn-check) + &:active,
  &:first-child:active,
  &.active,
  &.show {
    color: var(--#{$prefix}btn-active-color);
    background-color: var(--#{$prefix}btn-active-bg);
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
    border-color: var(--#{$prefix}btn-active-border-color);
    @include box-shadow(var(--#{$prefix}btn-active-shadow));

    &:focus-visible {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: var(--#{$prefix}btn-active-shadow), var(--#{$prefix}btn-focus-box-shadow);
      } @else {
        box-shadow: var(--#{$prefix}btn-focus-box-shadow);
      }
    }
  }

  &:disabled,
  &.disabled,
  fieldset:disabled & {
    color: var(--#{$prefix}btn-disabled-color);
    pointer-events: none;
    background-color: var(--#{$prefix}btn-disabled-bg);
    background-image: if($enable-gradients, none, null);
    border-color: var(--#{$prefix}btn-disabled-border-color);
    opacity: var(--#{$prefix}btn-disabled-opacity);
    @include box-shadow(none);
  }
}

//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
  --#{$prefix}btn-font-weight: #{$font-weight-normal};
  --#{$prefix}btn-color: #{$btn-link-color};
  --#{$prefix}btn-bg: transparent;
  --#{$prefix}btn-border-color: transparent;
  --#{$prefix}btn-hover-color: #{$btn-link-hover-color};
  --#{$prefix}btn-hover-border-color: transparent;
  --#{$prefix}btn-active-color: #{$btn-link-hover-color};
  --#{$prefix}btn-active-border-color: transparent;
  --#{$prefix}btn-disabled-color: #{$btn-link-disabled-color};
  --#{$prefix}btn-disabled-border-color: transparent;
  --#{$prefix}btn-box-shadow: 0 0 0 #000; // Can't use `none` as keyword negates all values when used with multiple shadows
  --#{$prefix}btn-focus-shadow-rgb: #{$btn-link-focus-shadow-rgb};

  text-decoration: $link-decoration;
  @if $enable-gradients {
    background-image: none;
  }

  &:hover,
  &:focus-visible {
    text-decoration: $link-hover-decoration;
  }

  &:focus-visible {
    color: var(--#{$prefix}btn-color);
  }

  &:hover {
    color: var(--#{$prefix}btn-hover-color);
  }

  // No need for an active state here
}

//
// Button Sizes
//

.btn-lg {
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-border-radius-lg);
}

.btn-sm {
  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-border-radius-sm);
}


.btn {
  // background: transparent;
  outline: none !important;
  vertical-align: middle;

  &:focus:not(.btn-elevate) {
    box-shadow: none !important;
  }

  // Themes
  &-clean {
    border-color: transparent;
    background: transparent;
    color: kt-base-color(shape, 3);

    i {
      color: kt-base-color(shape, 3);
    }

    .show > &,
    &.active,
    &:active,
    &:hover {
      color: kt-brand-color();
      background: kt-base-color(shape, 1);

      i {
        color: kt-brand-color();
      }
    }
  }

  &-default {
    border: 0;
    background: transparent;
    color: kt-base-color(label, 2);
    border: 1px solid kt-base-color(shape, 2);

    i {
      color: kt-base-color(shape, 3);
    }

    .show > &,
    &.active,
    &:active,
    &:hover {
      i {
        color: kt-brand-color(inverse);
      }

      color: kt-brand-color(inverse);
      background: kt-brand-color();
      border-color: kt-brand-color();
    }
  }

  &-secondary {
    background-color: transparent;
    border: 1px solid $input-border-color;
    color: $btn-secondary-color;

    .show > &.dropdown-toggle,
    &:focus,
    &.active,
    &:active,
    &:hover {
      color: $btn-secondary-color;
      border-color: $input-border-color;
      background-color: $btn-secondary-hover-bg-color;
    }
  }

  // Button states
  @each $name, $color in join($state-colors, $social-colors) {
    &-#{$name} {
      @include button-variant(kt-get($color, base), kt-get($color, base));
      color: kt-get($color, inverse);

      @if $name == light {
        .show > &.dropdown-toggle,
        &:focus,
        &.active,
        &:active,
        &:hover {
          background-color: kt-base-color(grey, 1);
          border-color: kt-base-color(grey, 1);
        }
      }

      & + .btn.dropdown-toggle {
        position: relative;

        &:before {
          display: block;
          content: " ";
          border-left: 1px solid kt-get($color, inverse);
          position: absolute;
          top: 3px;
          left: -1px;
          bottom: 3px;
          opacity: 0.3;
        }

        &:hover,
        &:focus,
        &.active {
          &:before {
            display: none;
          }
        }
      }
    }
  }

  // Outline states
  @each $name, $color in $state-colors {
    &-outline-#{$name} {
      @include button-outline-variant(
        kt-get($color, base),
        kt-get($color, inverse)
      );
    }
  }

  // Hover states
  @each $name, $color in $state-colors {
    &-hover-#{$name} {
      //background: transparent;
      //color: kt-get($color, base);

      .show > &,
      &.active,
      &:active,
      &:hover {
        color: kt-get($color, inverse);
        background-color: kt-get($color, base);
        border-color: kt-get($color, base);
      }
    }

    &-outline-hover-#{$name} {
      //background: transparent;

      &.btn-clean {
        border: 1px solid transparent;
      }

      .show > &,
      &.active,
      &:active,
      &:hover {
        color: kt-get($color, base);
        border-color: kt-get($color, base);
        background-color: transparent;
      }
    }
  }

  // Font states
  @each $name, $color in $state-colors {
    &-font-#{$name} {
      color: kt-get($color, base);
    }

    &-font-hover-#{$name} {
      .show > &,
      &.active,
      &:active,
      &:hover {
        color: kt-get($color, base);
      }
    }
  }

  // Secondary outline button
  &-outline-secondary {
    color: darken(kt-get($theme-colors, secondary), 50%);

    .show > &,
    &.active,
    &:active,
    &:hover {
      background-color: kt-get($theme-colors, secondary);
      //color: #fff;
    }
  }

  // Elevate buttons
  // Elevate 1
  &-elevate {
    transition: all 0.3s ease 0s;

    &.btn-elevate-air {
      &:hover {
        transform: translate(0, -4px);
      }
    }
  }

  @each $name, $color in $state-colors {
    $base-color: kt-get($color, base);

    @if $name == light {
      $base-color: #999999;
    }

    &.btn-#{$name}.btn-elevate {
      box-shadow: 0px 4px 16px 0px rgba($base-color, 0.15);

      .show > &,
      &:focus,
      &.active,
      &:active,
      &:hover {
        box-shadow: 0px 9px 16px 0px rgba($base-color, 0.25) !important;

        &.btn-sm {
          box-shadow: 0px 6px 16px 0px rgba($base-color, 0.25) !important;
        }

        @if $name == light {
          background-color: transparent;
          border-color: transparent;
        }
      }
    }

    &.btn-#{$name}.btn-elevate-hover {
      .show > &,
      &.active,
      &:focus,
      &:active,
      &:hover {
        box-shadow: 0px 9px 16px 0px rgba($base-color, 0.25) !important;

        &.btn-sm {
          box-shadow: 0px 6px 16px 0px rgba($base-color, 0.25) !important;
        }

        @if $name == light {
          background-color: transparent;
          border-color: transparent;
        }
      }
    }
  }

  // Square buttons
  &-square {
    border-radius: 0;
  }
}

// Pill buttons
.btn {
  &.btn-pill {
    border-radius: 2rem;
  }
}

// Text transform
.btn {
  &.btn-upper {
    text-transform: uppercase;
  }

  &.btn-bold {
    font-weight: 600;
  }

  &.btn-bolder {
    font-weight: 500;
  }

  &.btn-boldest {
    font-weight: 700;
  }

  &.btn-thin {
    font-weight: 400;
  }

  &.btn-lower {
    text-transform: lowercase;
  }
}

// Custom sizing
.btn {
  &.btn-wide {
    padding-left: 2.25rem;
    padding-right: 2.25rem;
  }

  &.btn-wider {
    padding-left: 2.75rem;
    padding-right: 2.75rem;
  }

  &.btn-widest {
    padding-left: 3rem;
    padding-right: 3rem;
  }

  &.btn-tall {
    padding-top: 0.85rem;
    padding-bottom: 0.85rem;
  }

  &.btn-taller {
    padding-top: 1.15rem;
    padding-bottom: 1.15rem;
  }

  &.btn-tallest {
    padding-top: 1.35rem;
    padding-bottom: 1.35rem;
  }
}

// Custom font sizing
.btn {
  &.btn-font-sm {
    font-size: 0.85rem;
  }

  &.btn-font-md {
    font-size: 1rem;
  }

  &.btn-font-lg {
    font-size: 1.1rem;
  }
}

// Button with icon
.btn {
  //display: inline-flex;
  align-items: center;

  svg {
    margin-right: 0.5rem;
    vertical-align: middle;
    line-height: 0;
  }

  @each $name, $color in $state-colors {
    &.btn-#{$name} {
      g {
        [fill] {
          fill: kt-get($color, inverse);
        }
      }
    }
  }

  &.btn-sm {

    svg {
      margin-right: 0.35rem;
    }
  }

  &.btn-lg {
    @include kt-icons-size(
      (
        lineawesome: 1.7rem,
        fontawesome: 1.4rem,
        flaticon: 1.3rem,
      )
    );

    i {
      padding-right: 0.75rem;
    }
  }
}

// Label button
.btn.btn-label {
  background-color: kt-base-color(shape, 1);
  color: kt-brand-color();
  cursor: text !important;
}

.btn.btn-link,
a.btn.btn-label,
button.btn.btn-label,
input.btn.btn-label {
  cursor: pointer !important;

  &:focus,
  &:hover,
  &.active {
    background-color: kt-brand-color();
    color: kt-brand-color(inverse);
  }
}

// Label button states
@each $name, $color in join($state-colors, $social-colors) {
  .btn.btn-label-#{$name} {
    background-color: rgba(kt-get($color, base), 0.1);
    color: kt-get($color, base);
    cursor: text !important;
  }

  .btn.btn-label-#{$name}-o2 {
    background-color: rgba(kt-get($color, base), 0.2);
    color: kt-get($color, base);
    cursor: text !important;
  }

  a.btn.btn-label-#{$name},
  button.btn.btn-label-#{$name},
  input.btn.btn-label-#{$name} {
    cursor: pointer !important;
    &:focus,
    &:hover,
    &.active {
      background-color: kt-get($color, base);
      color: kt-get($color, inverse);
    }
  }
}

// Button with icon only
.btn.btn-icon {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0;

  &.btn-circle {
    border-radius: 50%;
  }

  i {
    padding: 0;
    margin: 0;
    line-height: 0;
  }

  [class^="socicon-"],
  [class*=" socicon-"] {
    line-height: 1;
  }

  & {
    height: 3rem;
    width: 3rem;
  }

  &.btn-sm {
    height: 2.5rem;
    width: 2.5rem;
  }

  &.btn-lg {
    height: 4rem;
    width: 4rem;
  }

  // Icon sizing
  &.btn-icon-sm {
    @include kt-icons-size(
      (
        lineawesome: 1.25rem,
        fontawesome: 1.15rem,
        flaticon: 1.15rem,
      )
    );
  }

  // Icon sizing
  &.btn-icon-md {
    @include kt-icons-size(
      (
        lineawesome: 1.3rem,
        fontawesome: 1.2rem,
        flaticon: 1.2rem,
      )
    );
  }

  &.btn-icon-lg {
    @include kt-icons-size(
      (
        lineawesome: 1.4rem,
        fontawesome: 1.4rem,
        flaticon: 1.4rem,
      )
    );
  }

  // Icon button states
  @each $name, $color in $state-colors {
    &.btn-#{$name} {
      svg {
        g {
          [fill] {
            fill: kt-get($color, inverse);
          }
        }
      }

      &:focus,
      &:hover,
      &.active {
        i {
          color: kt-get($color, inverse);
        }
      }
    }
  }
}

// Same height with icon btn
.btn-icon-h {
  & {
    height: 3rem;
  }

  &.btn-sm {
    height: 2.25rem;
  }

  &.btn-lg {
    height: 4rem;
  }
}

// Input group workarounds
.input-group-append,
.input-group-prepend {
  .btn.btn-icon {
    height: auto;
  }
}

// Button with spinner
.btn.kt-spinner {
  & {
    &:not(.kt-spinner--center) {
      padding-left: 3 * $input-btn-padding-x;

      &:before {
        left: $input-btn-padding-x;
      }
    }

    // Right
    &.kt-spinner--right {
      padding-left: $input-btn-padding-x;
      padding-right: 3 * $input-btn-padding-x;

      &:before {
        left: auto;
        right: $input-btn-padding-x;
      }
    }
  }

  &.kt-spinner--sm {
    &:not(.kt-spinner--center) {
      padding-left: 2.5 * $input-btn-padding-x;

      &:before {
        left: $input-btn-padding-x;
      }
    }

    // Right
    &.kt-spinner--right {
      padding-left: $input-btn-padding-x;
      padding-right: 2.5 * $input-btn-padding-x;

      &:before {
        left: auto;
        right: $input-btn-padding-x;
      }
    }
  }

  &.kt-spinner--lg {
    &:not(.kt-spinner--center) {
      padding-left: 3.5 * $input-btn-padding-x;

      &:before {
        left: $input-btn-padding-x;
      }
    }

    // Right
    &.kt-spinner--right {
      padding-left: $input-btn-padding-x;
      padding-right: 3.5 * $input-btn-padding-x;

      &:before {
        left: auto;
        right: $input-btn-padding-x;
      }
    }
  }
}

// Button glow style
.btn {
  &.btn-glow {
    box-shadow: 0px 2px 14px 2px rgba(255, 255, 255, 0.1);

    .show > &,
    &.active,
    &:active,
    &:hover {
      box-shadow: 0px 2px 14px 2px rgba(255, 255, 255, 0.3);
    }
  }
}
